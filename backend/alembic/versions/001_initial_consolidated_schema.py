"""Initial consolidated schema with training programs

Revision ID: 001_initial_consolidated_schema
Revises: 
Create Date: 2025-08-05 15:20:00.000000

"""
from typing import Sequence, Union
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '001_initial_consolidated_schema'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    
    # Create custom enum types (with checkfirst to avoid duplicate creation)
    sa.Enum('PLAYER', 'LEARNER', 'CREATOR', 'REVIEWER', 'APPROVER', 'ADMIN', name='userrole').create(op.get_bind(), checkfirst=True)
    
    # Create users table
    op.create_table('users',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('username', sa.String(length=50), nullable=False),
        sa.Column('email', sa.String(length=255), nullable=False),
        sa.Column('hashed_password', sa.String(length=255), nullable=False),
        sa.Column('full_name', sa.String(length=255), nullable=True),
        sa.Column('role', postgresql.ENUM('PLAYER', 'LEARNER', 'CREATOR', 'REVIEWER', 'APPROVER', 'ADMIN', name='userrole', create_type=False), nullable=False),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('is_verified', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('last_login', sa.DateTime(timezone=True), nullable=True),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=True)
    op.create_index(op.f('ix_users_id'), 'users', ['id'], unique=False)
    op.create_index(op.f('ix_users_username'), 'users', ['username'], unique=True)
    
    # Create source_documents table
    op.create_table('source_documents',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('filename', sa.String(length=255), nullable=False),
        sa.Column('original_filename', sa.String(length=255), nullable=False),
        sa.Column('file_path', sa.String(length=500), nullable=False),
        sa.Column('file_size', sa.BigInteger(), nullable=False),
        sa.Column('mime_type', sa.String(length=100), nullable=False),
        sa.Column('file_hash', sa.String(length=64), nullable=False),
        sa.Column('claude_file_id', sa.String(length=255), nullable=True),
        sa.Column('claude_expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('title', sa.String(length=255), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('summary', sa.Text(), nullable=True),
        sa.Column('keywords', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('learning_objectives', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('document_type', sa.String(length=50), nullable=True),
        sa.Column('page_count', sa.Integer(), nullable=True),
        sa.Column('word_count', sa.Integer(), nullable=True),
        sa.Column('language', sa.String(length=10), nullable=True),
        sa.Column('usage_count', sa.Integer(), nullable=True),
        sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('owner_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['owner_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_source_documents_claude_file_id'), 'source_documents', ['claude_file_id'], unique=False)
    op.create_index(op.f('ix_source_documents_file_hash'), 'source_documents', ['file_hash'], unique=False)
    op.create_index(op.f('ix_source_documents_id'), 'source_documents', ['id'], unique=False)
    
    # Create workflow_templates table
    op.create_table('workflow_templates',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('content_types', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('is_default', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workflow_templates_id'), 'workflow_templates', ['id'], unique=False)
    
    # Create content_items table
    op.create_table('content_items',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('title', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('content_type', sa.String(length=50), nullable=False),
        sa.Column('learning_style', sa.String(length=50), nullable=False),
        sa.Column('difficulty_level', sa.String(length=20), nullable=True),
        sa.Column('estimated_duration', sa.Integer(), nullable=True),
        sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('learning_objectives', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('is_template', sa.Boolean(), nullable=True),
        sa.Column('template_category', sa.String(length=50), nullable=True),
        sa.Column('nlj_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('state', sa.String(length=20), nullable=True),
        sa.Column('version', sa.Integer(), nullable=True),
        sa.Column('creator_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('published_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_content_items_content_type'), 'content_items', ['content_type'], unique=False)
    op.create_index(op.f('ix_content_items_id'), 'content_items', ['id'], unique=False)
    op.create_index(op.f('ix_content_items_state'), 'content_items', ['state'], unique=False)
    
    # Create generation_sessions table
    op.create_table('generation_sessions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('prompt_template', sa.Text(), nullable=False),
        sa.Column('generation_parameters', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('generated_content', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=True),
        sa.Column('progress', sa.Integer(), nullable=True),
        sa.Column('error_message', sa.Text(), nullable=True),
        sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('creator_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_generation_sessions_id'), 'generation_sessions', ['id'], unique=False)
    
    # Create media_items table
    op.create_table('media_items',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('filename', sa.String(length=255), nullable=False),
        sa.Column('original_filename', sa.String(length=255), nullable=False),
        sa.Column('file_path', sa.String(length=500), nullable=False),
        sa.Column('file_size', sa.BigInteger(), nullable=False),
        sa.Column('mime_type', sa.String(length=100), nullable=False),
        sa.Column('media_type', sa.String(length=20), nullable=False),
        sa.Column('file_hash', sa.String(length=64), nullable=False),
        sa.Column('width', sa.Integer(), nullable=True),
        sa.Column('height', sa.Integer(), nullable=True),
        sa.Column('duration', sa.Float(), nullable=True),
        sa.Column('alt_text', sa.String(length=500), nullable=True),
        sa.Column('caption', sa.Text(), nullable=True),
        sa.Column('tags', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('creator_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_media_items_file_hash'), 'media_items', ['file_hash'], unique=False)
    op.create_index(op.f('ix_media_items_id'), 'media_items', ['id'], unique=False)
    op.create_index(op.f('ix_media_items_media_type'), 'media_items', ['media_type'], unique=False)
    
    # Create training_programs table
    op.create_table('training_programs',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('title', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('duration_minutes', sa.Integer(), nullable=False),
        sa.Column('prerequisites', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('content_items', postgresql.ARRAY(postgresql.UUID(as_uuid=True)), nullable=True),
        sa.Column('learning_objectives', postgresql.ARRAY(sa.String()), nullable=True),
        sa.Column('instructor_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('requires_approval', sa.Boolean(), nullable=True),
        sa.Column('auto_approve', sa.Boolean(), nullable=True),
        sa.Column('allow_waitlist', sa.Boolean(), nullable=True),
        sa.Column('is_published', sa.Boolean(), nullable=True),
        sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_training_programs_id'), 'training_programs', ['id'], unique=False)
    
    # Create workflow_template_stages table
    op.create_table('workflow_template_stages',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('template_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('stage_name', sa.String(length=100), nullable=False),
        sa.Column('stage_order', sa.Integer(), nullable=False),
        sa.Column('required_role', postgresql.ENUM('PLAYER', 'LEARNER', 'CREATOR', 'REVIEWER', 'APPROVER', 'ADMIN', name='userrole', create_type=False), nullable=False),
        sa.Column('is_required', sa.Boolean(), nullable=True),
        sa.Column('parallel_allowed', sa.Boolean(), nullable=True),
        sa.Column('auto_advance', sa.Boolean(), nullable=True),
        sa.Column('stage_config', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['template_id'], ['workflow_templates.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workflow_template_stages_id'), 'workflow_template_stages', ['id'], unique=False)
    
    # Create activity_sources table
    op.create_table('activity_sources',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('activity_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('source_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('usage_type', sa.String(length=50), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['activity_id'], ['content_items.id'], ),
        sa.ForeignKeyConstraint(['source_id'], ['source_documents.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_activity_sources_id'), 'activity_sources', ['id'], unique=False)
    
    # Create approval_workflows table
    op.create_table('approval_workflows',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('content_item_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('template_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('current_stage', sa.String(length=100), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=True),
        sa.Column('submitted_by_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['content_item_id'], ['content_items.id'], ),
        sa.ForeignKeyConstraint(['submitted_by_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['template_id'], ['workflow_templates.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_approval_workflows_id'), 'approval_workflows', ['id'], unique=False)
    
    # Create content_versions table
    op.create_table('content_versions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('content_item_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('version_number', sa.Integer(), nullable=False),
        sa.Column('title', sa.String(length=255), nullable=False),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('nlj_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('change_summary', sa.Text(), nullable=True),
        sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['content_item_id'], ['content_items.id'], ),
        sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('content_item_id', 'version_number')
    )
    op.create_index(op.f('ix_content_versions_id'), 'content_versions', ['id'], unique=False)
    
    # Create generation_session_sources table
    op.create_table('generation_session_sources',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('session_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('source_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('usage_type', sa.String(length=50), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['session_id'], ['generation_sessions.id'], ),
        sa.ForeignKeyConstraint(['source_id'], ['source_documents.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_generation_session_sources_id'), 'generation_session_sources', ['id'], unique=False)
    
    # Create shared_tokens table
    op.create_table('shared_tokens',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('token', sa.String(length=64), nullable=False),
        sa.Column('content_item_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('created_by_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('name', sa.String(length=255), nullable=True),
        sa.Column('description', sa.Text(), nullable=True),
        sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('view_count', sa.Integer(), nullable=True),
        sa.Column('completion_count', sa.Integer(), nullable=True),
        sa.Column('is_active', sa.Boolean(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('last_accessed_at', sa.DateTime(timezone=True), nullable=True),
        sa.ForeignKeyConstraint(['content_item_id'], ['content_items.id'], ),
        sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_shared_tokens_id'), 'shared_tokens', ['id'], unique=False)
    op.create_index(op.f('ix_shared_tokens_token'), 'shared_tokens', ['token'], unique=True)
    
    # Create training_sessions table
    op.create_table('training_sessions',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('program_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('start_time', sa.DateTime(timezone=True), nullable=False),
        sa.Column('end_time', sa.DateTime(timezone=True), nullable=False),
        sa.Column('location', sa.String(length=255), nullable=True),
        sa.Column('capacity', sa.Integer(), nullable=False),
        sa.Column('buffer_time_minutes', sa.Integer(), nullable=True),
        sa.Column('instructor_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('status', sa.String(length=20), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['instructor_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['program_id'], ['training_programs.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_training_sessions_id'), 'training_sessions', ['id'], unique=False)
    
    # Create workflow_stage_instances table
    op.create_table('workflow_stage_instances',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('workflow_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('stage_template_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('status', sa.String(length=20), nullable=True),
        sa.Column('assigned_to_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('completed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('stage_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.ForeignKeyConstraint(['assigned_to_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['stage_template_id'], ['workflow_template_stages.id'], ),
        sa.ForeignKeyConstraint(['workflow_id'], ['approval_workflows.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workflow_stage_instances_id'), 'workflow_stage_instances', ['id'], unique=False)
    
    # Create training_bookings table
    op.create_table('training_bookings',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('session_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('learner_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('booking_status', sa.String(length=20), nullable=True),
        sa.Column('waitlist_position', sa.Integer(), nullable=True),
        sa.Column('special_requirements', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('registered_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('confirmed_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('cancelled_at', sa.DateTime(timezone=True), nullable=True),
        sa.Column('cancellation_reason', sa.String(length=255), nullable=True),
        sa.ForeignKeyConstraint(['learner_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['session_id'], ['training_sessions.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_training_bookings_id'), 'training_bookings', ['id'], unique=False)
    
    # Create stage_reviewer_assignments table
    op.create_table('stage_reviewer_assignments',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('stage_instance_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('reviewer_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('assignment_type', sa.String(length=20), nullable=True),
        sa.Column('assigned_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['stage_instance_id'], ['workflow_stage_instances.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_stage_reviewer_assignments_id'), 'stage_reviewer_assignments', ['id'], unique=False)
    
    # Create workflow_reviews table
    op.create_table('workflow_reviews',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('stage_instance_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('reviewer_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('decision', sa.String(length=20), nullable=True),
        sa.Column('comments', sa.Text(), nullable=True),
        sa.Column('review_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('reviewed_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['reviewer_id'], ['users.id'], ),
        sa.ForeignKeyConstraint(['stage_instance_id'], ['workflow_stage_instances.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_workflow_reviews_id'), 'workflow_reviews', ['id'], unique=False)
    
    # Create attendance_records table
    op.create_table('attendance_records',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('booking_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('learner_id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('attendance_status', sa.String(length=20), nullable=True),
        sa.Column('check_in_time', sa.DateTime(timezone=True), nullable=True),
        sa.Column('check_out_time', sa.DateTime(timezone=True), nullable=True),
        sa.Column('completion_score', sa.Float(), nullable=True),
        sa.Column('feedback', sa.Text(), nullable=True),
        sa.Column('notes', sa.Text(), nullable=True),
        sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['booking_id'], ['training_bookings.id'], ),
        sa.ForeignKeyConstraint(['learner_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_attendance_records_id'), 'attendance_records', ['id'], unique=False)
    
    # Create xapi_event_log table
    op.create_table('xapi_event_log',
        sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
        sa.Column('event_id', sa.String(length=255), nullable=False),
        sa.Column('user_id', postgresql.UUID(as_uuid=True), nullable=True),
        sa.Column('session_id', sa.String(length=255), nullable=True),
        sa.Column('activity_id', sa.String(length=255), nullable=False),
        sa.Column('verb', sa.String(length=100), nullable=False),
        sa.Column('object_type', sa.String(length=100), nullable=False),
        sa.Column('object_id', sa.String(length=255), nullable=False),
        sa.Column('result_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('context_data', postgresql.JSONB(astext_type=sa.Text()), nullable=True),
        sa.Column('timestamp', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.Column('stored_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
        sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_xapi_event_log_activity_id'), 'xapi_event_log', ['activity_id'], unique=False)
    op.create_index(op.f('ix_xapi_event_log_event_id'), 'xapi_event_log', ['event_id'], unique=True)
    op.create_index(op.f('ix_xapi_event_log_id'), 'xapi_event_log', ['id'], unique=False)
    op.create_index(op.f('ix_xapi_event_log_timestamp'), 'xapi_event_log', ['timestamp'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_xapi_event_log_timestamp'), table_name='xapi_event_log')
    op.drop_index(op.f('ix_xapi_event_log_id'), table_name='xapi_event_log')
    op.drop_index(op.f('ix_xapi_event_log_event_id'), table_name='xapi_event_log')
    op.drop_index(op.f('ix_xapi_event_log_activity_id'), table_name='xapi_event_log')
    op.drop_table('xapi_event_log')
    op.drop_index(op.f('ix_attendance_records_id'), table_name='attendance_records')
    op.drop_table('attendance_records')
    op.drop_index(op.f('ix_workflow_reviews_id'), table_name='workflow_reviews')
    op.drop_table('workflow_reviews')
    op.drop_index(op.f('ix_stage_reviewer_assignments_id'), table_name='stage_reviewer_assignments')
    op.drop_table('stage_reviewer_assignments')
    op.drop_index(op.f('ix_training_bookings_id'), table_name='training_bookings')
    op.drop_table('training_bookings')
    op.drop_index(op.f('ix_workflow_stage_instances_id'), table_name='workflow_stage_instances')
    op.drop_table('workflow_stage_instances')
    op.drop_index(op.f('ix_training_sessions_id'), table_name='training_sessions')
    op.drop_table('training_sessions')
    op.drop_index(op.f('ix_shared_tokens_token'), table_name='shared_tokens')
    op.drop_index(op.f('ix_shared_tokens_id'), table_name='shared_tokens')
    op.drop_table('shared_tokens')
    op.drop_index(op.f('ix_generation_session_sources_id'), table_name='generation_session_sources')
    op.drop_table('generation_session_sources')
    op.drop_index(op.f('ix_content_versions_id'), table_name='content_versions')
    op.drop_table('content_versions')
    op.drop_index(op.f('ix_approval_workflows_id'), table_name='approval_workflows')
    op.drop_table('approval_workflows')
    op.drop_index(op.f('ix_activity_sources_id'), table_name='activity_sources')
    op.drop_table('activity_sources')
    op.drop_index(op.f('ix_workflow_template_stages_id'), table_name='workflow_template_stages')
    op.drop_table('workflow_template_stages')
    op.drop_index(op.f('ix_training_programs_id'), table_name='training_programs')
    op.drop_table('training_programs')
    op.drop_index(op.f('ix_media_items_media_type'), table_name='media_items')
    op.drop_index(op.f('ix_media_items_id'), table_name='media_items')
    op.drop_index(op.f('ix_media_items_file_hash'), table_name='media_items')
    op.drop_table('media_items')
    op.drop_index(op.f('ix_generation_sessions_id'), table_name='generation_sessions')
    op.drop_table('generation_sessions')
    op.drop_index(op.f('ix_content_items_state'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_id'), table_name='content_items')
    op.drop_index(op.f('ix_content_items_content_type'), table_name='content_items')
    op.drop_table('content_items')
    op.drop_index(op.f('ix_workflow_templates_id'), table_name='workflow_templates')
    op.drop_table('workflow_templates')
    op.drop_index(op.f('ix_source_documents_id'), table_name='source_documents')
    op.drop_index(op.f('ix_source_documents_file_hash'), table_name='source_documents')
    op.drop_index(op.f('ix_source_documents_claude_file_id'), table_name='source_documents')
    op.drop_table('source_documents')
    op.drop_index(op.f('ix_users_username'), table_name='users')
    op.drop_index(op.f('ix_users_id'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_table('users')
    sa.Enum('PLAYER', 'LEARNER', 'CREATOR', 'REVIEWER', 'APPROVER', 'ADMIN', name='userrole').drop(op.get_bind())
    # ### end Alembic commands ###