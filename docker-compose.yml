services:
  # Existing NLJ Platform Database
  nlj-db:
    image: postgres:15-alpine
    container_name: nlj_postgres
    environment:
      POSTGRES_DB: nlj_platform
      POSTGRES_USER: nlj_user
      POSTGRES_PASSWORD: nlj_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5432:5432"
    volumes:
      - nlj_db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U nlj_user -d nlj_platform"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - nlj_network

  # Test Database - PostgreSQL for running tests with production-like environment
  nlj-test-db:
    image: postgres:15-alpine
    container_name: nlj_test_postgres
    environment:
      POSTGRES_DB: nlj_test
      POSTGRES_USER: test_user
      POSTGRES_PASSWORD: test_pass
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "5433:5432"  # Different port to avoid conflicts
    tmpfs:
      - /var/lib/postgresql/data  # In-memory for faster tests
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U test_user -d nlj_test"]
      interval: 5s
      timeout: 3s
      retries: 3
    networks:
      - nlj_network
    profiles:
      - testing

  # Event Infrastructure - RedPanda (Kafka API Compatible)
  redpanda:
    image: redpandadata/redpanda:latest
    container_name: nlj_redpanda
    ports:
      - "9092:9092"     # Kafka API (same as original Kafka)
      - "9644:9644"     # Admin API  
    command:
      - redpanda
      - start
      - --node-id=0
      - --kafka-addr=PLAINTEXT://0.0.0.0:29092,OUTSIDE://0.0.0.0:9092
      - --advertise-kafka-addr=PLAINTEXT://redpanda:29092,OUTSIDE://localhost:9092
      - --pandaproxy-addr=PLAINTEXT://0.0.0.0:8083
      - --advertise-pandaproxy-addr=PLAINTEXT://redpanda:8083
      - --schema-registry-addr=PLAINTEXT://0.0.0.0:8084
      - --rpc-addr=redpanda:33145
      - --advertise-rpc-addr=redpanda:33145
      - --mode=dev-container
      - --smp=1
      - --memory=1G
      - --reserve-memory=0M
      - --overprovisioned
      - --default-log-level=info
    volumes:
      - redpanda_data:/var/lib/redpanda/data
    networks:
      - nlj_network
    healthcheck:
      test: ["CMD-SHELL", "rpk cluster health | grep -q 'Healthy:.*true' || exit 1"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # RedPanda Console - Web UI for RedPanda/Kafka Management
  redpanda-console:
    image: redpandadata/console:latest
    container_name: nlj_redpanda_console
    ports:
      - "8080:8080"     # Web UI for Kafka/RedPanda management
    environment:
      KAFKA_BROKERS: redpanda:29092
      REDPANDA_ADMINAPI_ENABLED: true
      REDPANDA_ADMINAPI_URLS: http://redpanda:9644
      CONSOLE_KAFKA_SCHEMAREGISTRY_ENABLED: true
      CONSOLE_KAFKA_SCHEMAREGISTRY_URLS: http://redpanda:8084
    depends_on:
      redpanda:
        condition: service_healthy
    networks:
      - nlj_network
    restart: unless-stopped


  # NLJ FastAPI Backend
  nlj-api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: nlj_api
    ports:
      - "8000:8000"
    env_file:
      - .env
    environment:
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://nlj_user:nlj_pass@nlj-db:5432/nlj_platform
      
      # RedPanda Configuration (Kafka API Compatible)
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - KAFKA_CLIENT_ID=nlj-platform
      
      # Calendar Integration
      - GOOGLE_CALENDAR_CLIENT_ID=${GOOGLE_CALENDAR_CLIENT_ID:-}
      - GOOGLE_CALENDAR_CLIENT_SECRET=${GOOGLE_CALENDAR_CLIENT_SECRET:-}
      - MICROSOFT_CLIENT_ID=${MICROSOFT_CLIENT_ID:-}
      - MICROSOFT_CLIENT_SECRET=${MICROSOFT_CLIENT_SECRET:-}
      
      
      # Application Settings
      - DEBUG=${DEBUG:-true}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - ENABLE_REGISTRATION=${ENABLE_REGISTRATION:-true}
      
      # Claude API
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
      
      # ElevenLabs API
      - ELEVENLABS_API_KEY=${ELEVENLABS_API_KEY:-}
      
      # File Upload
      - MAX_FILE_SIZE=${MAX_FILE_SIZE:-524288000}
      - UPLOAD_DIR=uploads
      
      # Frontend URL
      - FRONTEND_URL=${FRONTEND_URL:-http://localhost:5173}
      
      # Elasticsearch Configuration  
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=xapi-statements
      
    volumes:
      - ./backend/uploads:/app/uploads
      - ./backend/app:/app/app  # For development hot-reload
    depends_on:
      nlj-db:
        condition: service_healthy
      redpanda:
        condition: service_healthy
    networks:
      - nlj_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # NLJ Frontend (React/Vite)
  nlj-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: production
    container_name: nlj_frontend
    ports:
      - "8081:80"
    environment:
      - VITE_API_URL=http://localhost:8000
      - NODE_ENV=production
    depends_on:
      nlj-api:
        condition: service_healthy
    networks:
      - nlj_network
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    profiles:
      - production

  # Elasticsearch - Analytics Engine for Learning Records
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:9.0.0
    container_name: nlj_elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - xpack.security.http.ssl.enabled=false
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - bootstrap.memory_lock=true
    ports:
      - "9200:9200"
      - "9300:9300"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - nlj_network
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9200/_cluster/health?wait_for_status=yellow&timeout=30s || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 45s
    restart: unless-stopped
    profiles:
      - analytics


  # FastStream xAPI Consumer - Modern Event Processing (NEW)
  nlj-faststream-consumer:
    build:
      context: ./backend
      dockerfile: Dockerfile.faststream
    container_name: nlj_faststream_consumer
    command: [".venv/bin/python", "-c", "import asyncio; from app.brokers.kafka_broker import app; asyncio.run(app.run())"]
    environment:
      # Core FastStream settings
      - FASTSTREAM_WORKERS=4
      - FASTSTREAM_LOG_LEVEL=INFO
      
      # Kafka Configuration
      - KAFKA_BOOTSTRAP_SERVERS=redpanda:29092
      - KAFKA_CLIENT_ID=nlj-faststream-platform
      - KAFKA_GROUP_ID=nlj-faststream-consumer
      
      # Database Configuration
      - DATABASE_URL=postgresql+asyncpg://nlj_user:nlj_pass@nlj-db:5432/nlj_platform
      - DATABASE_POOL_SIZE=10
      - DATABASE_MAX_OVERFLOW=20
      
      # Elasticsearch Configuration (Direct - No Ralph LRS)
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - ELASTICSEARCH_INDEX=xapi-statements
      - ELASTICSEARCH_TIMEOUT=30
      
      # Claude API Configuration
      - CLAUDE_API_KEY=${CLAUDE_API_KEY:-}
      
      # Application Settings
      - DEBUG=${DEBUG:-false}
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
      
    volumes:
      - ./backend/app:/app/app  # Development hot-reload
    depends_on:
      nlj-db:
        condition: service_healthy
      redpanda:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
      # NOTE: No ralph-lrs dependency - direct Elasticsearch integration
    networks:
      - nlj_network
    restart: unless-stopped
    
    # Resource limits for FastStream container
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'
    
    # Health check using FastStream health module
    healthcheck:
      test: ["CMD-SHELL", ".venv/bin/python -c 'import asyncio; from app.health import health_check; health = asyncio.run(health_check()); exit(0 if health[\"status\"] != \"unhealthy\" else 1)'"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    
    profiles:
      - faststream
      - analytics


volumes:
  nlj_db_data:
    driver: local
  redpanda_data:
    driver: local
  elasticsearch_data:
    driver: local

networks:
  nlj_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16